
# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration

require "securerandom"
require 'fileutils'

RSpec.configure do |config|
  config.treat_symbols_as_metadata_keys_with_true_values = true
  config.run_all_when_everything_filtered = true
  config.filter_run :focus

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = 'random'
end


def fixture_path(path)
  File.join(File.dirname(__FILE__), "fixtures", path)
end

# @return [Pathname] The root of the repo.
#
ROOT = Pathname.new(File.expand_path('../../', __FILE__)) unless defined? ROOT

#$:.unshift((ROOT + 'lib').to_s)


# @return [Pathname The folder where the CocoaPods binary should operate.
#
TMP_DIR = ROOT + 'tmp' unless defined? TMP_DIR

# @!group Helpers

# Copies the before subdirectory of the given tests folder in the temporary
# directory.
#
# @param  [String] fixture_project
#         the name of the project for the test.
#
# @param  [String] test_subdir
#         the name of the folder of the tests.
#
# @return [Array]
#         path of the original and copy project

def create_test_dir(test_subdir)
  dir = File.join(TMP_DIR,test_subdir)
  dir.mkpath
end

def create_temp_random_dir(&block)
  dir = Pathname.new(File.join(TMP_DIR,SecureRandom.hex(16)))
  raise "random dir #{dir} should not exist" if dir.exist?
  dir.mkpath
  yield(dir)
  FileUtils.rm_rf dir
end


def copy_files(fixture_project, test_subdir)
  #TODO clean the test_subdir
  source = File.join(ROOT,"spec/fixtures", fixture_project)
  TMP_DIR.mkpath
  FileUtils.cp_r(source, TMP_DIR)
  project_copy = File.join(TMP_DIR, fixture_project, fixture_project + ".xcodeproj")
  project_original = path_of_fixture_project(fixture_project)
  return [project_original, project_copy]
end

def path_of_fixture_project(fixture_project)
  source = File.join(ROOT,"spec/fixtures", fixture_project)
  File.join(source, fixture_project + ".xcodeproj")
end

def path_of_fixture_podfile_for_dir(dir)
  File.join(ROOT, "spec", "fixtures", "Podfiles", dir, "Podfile" )
end

def test_dir(test_sub_dir)
  File.join(TMP_DIR,test_sub_dir)
end

def run_pods(dir, args)
  Dir.chdir(dir) do
    `pod #{args}`
  end
end